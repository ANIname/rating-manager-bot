import { LocaleString } from 'discord.js'

import { Player } from '../types.d'
import weapons from '../weapons.json'

type SupportedLocale = 'uk' | 'ru' | 'en-US'
type AvailableLocalesNames = keyof typeof locales

const availableLocales = new Set(['uk', 'ru', 'en-US'])

const locales = {
  draw: {
    uk: (userPlayerChoice: string) => `ü§ù –ù—ñ—á–∏—è! –ú–∏ –æ–±–∏–¥–≤–∞ –æ–±—Ä–∞–ª–∏: ${userPlayerChoice}`,
    ru: (userPlayerChoice: string) => `ü§ù –ù–∏—á—å—è! –ú—ã –æ–±–∞ –≤—ã–±—Ä–∞–ª–∏: ${userPlayerChoice}`,
    'en-US': (userPlayerChoice: string) => `ü§ù Draw! We both chose: ${userPlayerChoice}`
  },
  win: {
    uk: (userPlayerChoice: string, botPlayerChoice: string) => `üéâ –í–∏ –≤–∏–≥—Ä–∞–ª–∏! –í–∞—à –≤–∏–±—ñ—Ä: ${userPlayerChoice}, –º—ñ–π –≤–∏–±—ñ—Ä: ${botPlayerChoice}`,
    ru: (userPlayerChoice: string, botPlayerChoice: string) => `üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏! –í–∞—à –≤—ã–±–æ—Ä: ${userPlayerChoice}, –º–æ–π –≤—ã–±–æ—Ä: ${botPlayerChoice}`,
    'en-US': (userPlayerChoice: string, botPlayerChoice: string) => `üéâ You won! Your choice: ${userPlayerChoice}, my choice: ${botPlayerChoice}`
  },
  lose: {
    uk: (userPlayerChoice: string, botPlayerChoice: string) => `üò≠ –í–∏ –ø—Ä–æ–≥—Ä–∞–ª–∏! –í–∞—à –≤–∏–±—ñ—Ä: ${userPlayerChoice}, –º—ñ–π –≤–∏–±—ñ—Ä: ${botPlayerChoice}`,
    ru: (userPlayerChoice: string, botPlayerChoice: string) => `üò≠ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏! –í–∞—à –≤—ã–±–æ—Ä: ${userPlayerChoice}, –º–æ–π –≤—ã–±–æ—Ä: ${botPlayerChoice}`,
    'en-US': (userPlayerChoice: string, botPlayerChoice: string) => `üò≠ You lost! Your choice: ${userPlayerChoice}, my choice: ${botPlayerChoice}`
  }
}

/**
 * Get player choice
 * @param {LocaleString} locale - Locale
 * @param {Player} player - Player
 * @returns {string} - Player choice localized
 */
export function getPlayerChoice(locale: LocaleString, player: Player): string {
  const localeString = availableLocales.has(locale) ? locale as SupportedLocale : 'en-US'

  // eslint-disable-next-line security/detect-object-injection
  return weapons[player.weapon].name_localizations[localeString]
}

/**
 * Get localized message
 * @param {LocaleString} locale - interaction locale (Example: 'en' | 'ru' | 'uk')
 * @param {AvailableLocalesNames} localeName - Locale name (Example: 'draw' | 'win' | 'lose')
 * @param {string} userPlayerChoice - Localized user player choice (Example: '–ö–∞–º—ñ–Ω—å' | '–ö–∞–º–µ–Ω—å' | 'Rock')
 * @param {string} botPlayerChoice - Localized bot player choice (Example: '–ù–æ–∂–∏—Ü—ñ' | '–ù–æ–∂–Ω–∏—Ü—ã' | 'Scissors')
 * @returns {string} - Message localized
 */
export function getLocalisedMessage(locale: LocaleString, localeName: AvailableLocalesNames, userPlayerChoice: string, botPlayerChoice: string): string {
  const localeString = availableLocales.has(locale) ? locale as SupportedLocale : 'en-US'

  // eslint-disable-next-line security/detect-object-injection
  return locales[localeName][localeString](userPlayerChoice, botPlayerChoice)
}
